#!groovy
pipeline {
    agent none
    environment {
        GITLAB_TOKEN = credentials('e3077b1e-a85e-4811-8dda-952c99be7b0a')
        GITLAB_READ = credentials('PLSSVM-READ')
    }
    stages {
        stage('init') {
            agent any
            steps {


                sh '''
                    gitlab_token=$(echo ${GITLAB_TOKEN} | cut -f2 -d':')
                    curl --verbose\
                        --request POST \
                        --url "https://gitlab-sim.informatik.uni-stuttgart.de/api/v4/projects/162/statuses/$GIT_COMMIT" \
                        --header "Content-Type: application/json" \
                        --header "authorization: Bearer ${gitlab_token}" \
                        --data "{
                            \\"state\\": \\"running\\",
                            \\"context\\": \\"jenkins-ctest\\",
                            \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                            \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/job/PLSSVM/$BUILD_NUMBER/console\\"
                    }"
                '''

            }
        }
        stage('checkout and build epyc cpu') { // theoretisch geht hier auch OpenCL (Vega 20 Radeon VII)
            agent { label 'argon-fs'}
            steps {
                sh '''
                    gitlab_token=$(echo ${PLSSVM-READ} | cut -f2 -d':')
                    srun -p epyc -N 1 -n 1 -t 00:30:00 -D /data/scratch/jenkins/plssvm bash -c "\
                    rm -rf plssvm && \
                    gitlab_token=$(echo ${GITLAB_READ} | cut -f2 -d':') && \
                    git clone --branch time --single-branch --dept 1 https://oauth2:WL9CxsrxoQnGMaQQ7EcR@gitlab-sim.informatik.uni-stuttgart.de/vancraar/Bachelor-Code.git plssvm && \
                    cd plssvm/SVM && \
                    mkdir -p build/Release && \
                    cd build/Release && \
                    /import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-cascadelake/clang-12.0.0/cmake-3.20.2-z3urlvzqm5igtwxj25nnd5olciuq7ayb/bin/cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_ENABLE_TESTING=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF  -DPLSVM_ENABLE_OpenMP_BACKEND=ON  ../../ && \
                    make -j "
                '''
            }
        }
        stage('setup python'){
            agent any
            steps{
                sh '''
                    /usr/bin/python3.8 -m pip install --user arff
                    /usr/bin/python3.8 -m pip install --user pandas
                    /usr/bin/python3.8 -m pip install --user sklearn
                '''
            }
        }

        stage('generate test Data argon-fs'){
            agent {label 'argon-fs'}
            steps{
                sh '''
                    srun -p epyc -N 1 -n 1 -t 00:30:00 -D /data/scratch/jenkins/plssvm bash -c "\
                    cd plssvm/SVM/data && \
                    python3 generate_data.py --format libsvm --samples 10000 --features 5000 --output data.libsvm \
                    "
                '''
            }
        }
        stage('runtimetest argon-fs'){
            agent{label 'argon-fs'}
            steps{
                sh '''
                    srun -p epyc -N 1 -n 1 -t 00:30:00 -D /data/scratch/jenkins/plssvm bash -c "\
                    cd plssvm/SVM/data
                    ../build/Release/svm-train --backend=openmp  --input data.libsvm | python3 collect_runtimes /import/sgs.scratch/vancraar/runtime-epyc-openmp.csv
                '''
            }
        }


    }
    post {
        success {
            agent any
            sh '''
                gitlab_token=$(echo ${GITLAB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://gitlab-sim.informatik.uni-stuttgart.de/api/v4/projects/162/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"success\\",
                        \\"context\\": \\"jenkins-ctest\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/job/PLSSVM/$BUILD_NUMBER/console\\"
                }"
            '''
        }
        failure {
            agent any
            sh '''
                gitlab_token=$(echo ${GITLAB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://gitlab-sim.informatik.uni-stuttgart.de/api/v4/projects/162/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"failed\\",
                        \\"context\\": \\"jenkins-ctest\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/job/PLSSVM/$BUILD_NUMBER/console\\"
                }"
            '''
        }
        aborted {
            agent any
            sh '''
                gitlab_token=$(echo ${GITLAB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://gitlab-sim.informatik.uni-stuttgart.de/api/v4/projects/162/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"canceled\\",
                        \\"context\\": \\"jenkins-ctest\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/job/PLSSVM/$BUILD_NUMBER/console\\"
                }"
            '''
        }
    }
}