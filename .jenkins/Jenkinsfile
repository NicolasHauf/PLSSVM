#!groovy
pipeline {
    agent none
    environment {
        GITLAB_TOKEN = credentials('PLSSVM-GitLab-Api')
    }
    stages {
        stage('checkout and build epyc cpu') { // theoretisch geht hier auch OpenCL (Vega 20 Radeon VII)
            agent { label 'argon-fs'}
            steps {
                sh '''
                    srun -p epyc -N 1 -n 1 -t 00:30:00 -D /data/scratch/jenkins/plssvm bash -c "\
                    rm -rf plssvm && \
                    gitlab_token=$(echo ${GITLAB_TOKEN} | cut -f2 -d':') && \
                    git clone --branch time --single-branch --dept 1 https://oauth2:$gitlab_token@gitlab-sim.informatik.uni-stuttgart.de/vancraar/Bachelor-Code.git plssvm && \
                    cd plssvm/SVM && \
                    mkdir -p build/Release && \
                    cd build/Release && \
                    /import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-zen/gcc-9.3.0/cmake-3.20.2-3iug2mkxsvqokairopuge643lcasu3rg/bin/cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_ENABLE_TESTING=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF  -DPLSVM_ENABLE_OpenMP_BACKEND=ON  ../../ && \
                    make -j "
                '''
            }
        }
        stage('setup python'){
            agent any
            steps{
                sh '''
                    /usr/bin/python3.8 -m pip install --user arff
                    /usr/bin/python3.8 -m pip install --user pandas
                    /usr/bin/python3.8 -m pip install --user datetime
                    /usr/bin/python3.8 -m pip install --user sklearn
                '''
            }
        }

        stage('generate test Data argon-fs'){
            agent {label 'argon-fs'}
            steps{
                sh '''
                    srun -p epyc -N 1 -n 1 -t 00:30:00 -D /data/scratch/jenkins/plssvm bash -c "\
                    cd plssvm/SVM/data && \
                    python3 generate_data.py --format libsvm --samples 10000 --features 5000 --output data.libsvm \
                    "
                '''
            }
        }
        stage('runtimetest argon-fs'){
            agent{label 'argon-fs'}
            steps{
                sh '''
                    srun -p epyc -N 1 -n 1 -t 00:30:00 -D /data/scratch/jenkins/plssvm bash -c "\
                    cd plssvm/SVM/data
                    ../build/Release/svm-train --backend=openmp  --input data.libsvm | python3 collect_runtimes.py --output /import/sgs.scratch/vancraar/runtime-epyc-openmp.csv
                    "
                '''
            }
        }
    }

}