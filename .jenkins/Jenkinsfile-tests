#!groovy
pipeline {
    agent { label 'pcsgs02 || pcsgs03 || pcsgs04 || pcsgs05' }
    environment {
        GITLAB_TOKEN = credentials('PLSSVM-GitLab-Api')
    }
    stages {
        stage('init') {
            steps {
                dir('plssvm') {
                    sh '''
                        gitlab_token=$(echo ${GITLAB_TOKEN} | cut -f2 -d':')
                        curl --verbose\
                            --request POST \
                            --url "https://gitlab-sim.informatik.uni-stuttgart.de/api/v4/projects/162/statuses/$GIT_COMMIT" \
                            --header "Content-Type: application/json" \
                            --header "authorization: Bearer ${gitlab_token}" \
                            --data "{
                                \\"state\\": \\"running\\",
                                \\"context\\": \\"jenkins-ctest\\",
                                \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                                \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/All/job/PLSSVM/job/PLSSVM-test/$BUILD_NUMBER\\"
                        }"
                    '''
                }
            }
        }
        stage('checkout') {
            steps {
                dir('plssvm') {
                    checkout scm
                }
            }
        }
        stage('setup python'){
            steps{
                sh '''
                    /usr/bin/python3.8 -m pip install --user arff
                    /usr/bin/python3.8 -m pip install --user pandas
                    /usr/bin/python3.8 -m pip install --user sklearn
                    /usr/bin/python3.8 -m pip install --user argparse
                '''
            }
        }
        stage('build plssvm Release') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda
                        cd SVM
                        mkdir -p build/Release
                        cd build/Release
                        rm -rf *
                        /import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-cascadelake/clang-12.0.0/cmake-3.20.2-z3urlvzqm5igtwxj25nnd5olciuq7ayb/bin/cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="cpu;nvidia:sm_86" ../../
                        make -j4
                    '''
                }
            }
        }
        stage('run tests Release') {
            steps {
                dir('plssvm') {
                    warnError('Release tests failed!') {
                        sh '''
                            module load cuda
                            cd SVM/build/Release
                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
        stage('build plssvm hipSYCL Release') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda
                        module use /home/breyerml/.modulefiles/
                        module load pcsgs05/hipsycl
                        cd SVM
                        mkdir -p build/Release
                        cd build/Release
                        rm -rf *
                        /import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-cascadelake/clang-12.0.0/cmake-3.20.2-z3urlvzqm5igtwxj25nnd5olciuq7ayb/bin/cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="cpu;nvidia:sm_80" -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON ../../
                        make -j4
                    '''
                }
            }
        }
        stage('run tests hipSYCL Release') {
            steps {
                dir('plssvm') {
                    warnError('hipSYCL Release tests failed!') {
                        sh '''
                            module load cuda
                            module use /home/breyerml/.modulefiles/
                            module load pcsgs05/hipsycl
                            cd SVM/build/Release
                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
        stage('build plssvm DPC++ Release') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda
                        module use /home/breyerml/.modulefiles/
                        module load pcsgs05/dpcpp
                        cd SVM
                        mkdir -p build/Release
                        cd build/Release
                        rm -rf *
                        /import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-cascadelake/clang-12.0.0/cmake-3.20.2-z3urlvzqm5igtwxj25nnd5olciuq7ayb/bin/cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="cpu;nvidia:sm_80" -DCMAKE_CXX_COMPILER=clang++ -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON ../../
                        make -j4
                    '''
                }
            }
        }
        stage('run tests DPC++ Release') {
            steps {
                dir('plssvm') {
                    warnError('DPC++ Release tests failed!') {
                        sh '''
                            module load cuda
                            module use /home/breyerml/.modulefiles/
                            module load pcsgs05/dpcpp
                            cd SVM/build/Release
                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
        stage('build plssvm Debug') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda
                        cd SVM
                        mkdir -p build/Debug
                        cd build/Debug
                        rm -rf *
                        /import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-cascadelake/clang-12.0.0/cmake-3.20.2-z3urlvzqm5igtwxj25nnd5olciuq7ayb/bin/cmake -DCMAKE_BUILD_TYPE=Debug  -DPLSSVM_TARGET_PLATFORMS="cpu;nvidia:sm_86" ../../
                        make -j4
                    '''
                }
            }
        }
        stage('run tests Debug') {
            steps {
                dir('plssvm') {
                    warnError('Debug tests failed!') {
                        sh '''
                            module load cuda
                            cd SVM/build/Debug
                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
        stage('build plssvm hipSYCL Debug') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda
                        module use /home/breyerml/.modulefiles/
                        module load pcsgs05/hipsycl
                        cd SVM
                        mkdir -p build/Debug
                        cd build/Debug
                        rm -rf *
                        /import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-cascadelake/clang-12.0.0/cmake-3.20.2-z3urlvzqm5igtwxj25nnd5olciuq7ayb/bin/cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="cpu;nvidia:sm_80" -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON ../../
                        make -j4
                    '''
                }
            }
        }
        stage('run tests hipSYCL Debug') {
            steps {
                dir('plssvm') {
                    warnError('hipSYCL Debug tests failed!') {
                        sh '''
                            module load cuda
                            module use /home/breyerml/.modulefiles/
                            module load pcsgs05/hipsycl
                            cd SVM/build/Debug
                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
        stage('build plssvm DPC++ Debug') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda
                        module use /home/breyerml/.modulefiles/
                        module load pcsgs05/dpcpp
                        cd SVM
                        mkdir -p build/Debug
                        cd build/Debug
                        rm -rf *
                        /import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-cascadelake/clang-12.0.0/cmake-3.20.2-z3urlvzqm5igtwxj25nnd5olciuq7ayb/bin/cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="cpu;nvidia:sm_80" -DCMAKE_CXX_COMPILER=clang++ -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON ../../
                        make -j4
                    '''
                }
            }
        }
        stage('run tests DPC++ Debug') {
            steps {
                dir('plssvm') {
                    warnError('DPC++ Debug tests failed!') {
                        sh '''
                            module load cuda
                            module use /home/breyerml/.modulefiles/
                            module load pcsgs05/dpcpp
                            cd SVM/build/Debug
                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            // Process the CTest xml output with the xUnit plugin
            xunit (
                testTimeMargin: '3000',
                thresholdMode: 1,
                thresholds: [
                    skipped(failureThreshold: '0'),
                    failed(failureThreshold: '0')
                ],
                tools: [CTest(
                    pattern: 'plssvm/SVM/build/*/Testing/**/*.xml',
                    deleteOutputFiles: true,
                    failIfNotNew: false,
                    skipNoTestFiles: true,
                    stopProcessingIfError: true
                )]
            )

        }
        success {
            sh '''
                gitlab_token=$(echo ${GITLAB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://gitlab-sim.informatik.uni-stuttgart.de/api/v4/projects/162/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"success\\",
                        \\"context\\": \\"jenkins-ctest\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/All/job/PLSSVM/job/PLSSVM-test/$BUILD_NUMBER\\"
                }"
            '''
        }
        failure {
            sh '''
                gitlab_token=$(echo ${GITLAB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://gitlab-sim.informatik.uni-stuttgart.de/api/v4/projects/162/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"failed\\",
                        \\"context\\": \\"jenkins-ctest\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/All/job/PLSSVM/job/PLSSVM-test/$BUILD_NUMBER\\"
                }"
            '''
        }
        aborted {
            sh '''
                gitlab_token=$(echo ${GITLAB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://gitlab-sim.informatik.uni-stuttgart.de/api/v4/projects/162/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"canceled\\",
                        \\"context\\": \\"jenkins-ctest\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/All/job/PLSSVM/job/PLSSVM-test/$BUILD_NUMBER\\"
                }"
            '''
        }
    }
}
