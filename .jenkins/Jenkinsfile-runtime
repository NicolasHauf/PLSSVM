#!groovy
pipeline {
    agent none
    environment {
        GITLAB_TOKEN = credentials('PLSSVMGitLab-Read-Repo-Text')
    }
    stages {
        stage('setup python'){
            agent any
            steps{
                sh '''
                    /usr/bin/python3.8 -m pip install --user arff
                    /usr/bin/python3.8 -m pip install --user pandas
                    /usr/bin/python3.8 -m pip install --user datetime
                    /usr/bin/python3.8 -m pip install --user sklearn
                '''
            }
        }

        stage('checkout, build and runtimetest') { // theoretisch geht hier auch OpenCL (Vega 20 Radeon VII)
            agent { label 'argon-fs'}
            steps {
                sh '''
                    srun --nodelist="argon-tesla[1,2]" -N 1 -n 1 -t 2-00:00:00 --gres=gpu:1 --mail-type=ALL --mail-user=vancraar  bash -c "\
                    module load cuda
                    mkdir -p /data/scratch/jenkins/plssvm  && \
                    cd /data/scratch/jenkins/plssvm  && \
                    rm -rf plssvm && \
                    git clone --branch time --single-branch --dept 1 https://oauth2:$(echo ${GITLAB_TOKEN} | cut -f2 -d':')@gitlab-sim.informatik.uni-stuttgart.de/vancraar/Bachelor-Code.git plssvm && \
                    cd plssvm/SVM && \
                    mkdir -p build/Release && \
                    cd build/Release && \
                    /import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-cascadelake/clang-12.0.0/cmake-3.20.2-z3urlvzqm5igtwxj25nnd5olciuq7ayb/bin/cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_ENABLE_TESTING=OFF -DPLSSVM_TARGET_PLATFORMS=\\"cpu;nvidia:sm_60\\" ../../ && \
                    make -j &&\
                    ./time.sh && \
                    cd ../../../ &&\
                    rm -rf plssvm"
                '''
            }
        }



    }

}